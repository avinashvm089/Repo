/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
import groovy.xml.XmlUtil
import java.io.File
task Manupulate_Node_Content {
	doLast{
		def dir="C:/Users/Avinash Kumar Singh/Downloads"
		FileTree tree = project.fileTree(dir).matching{
            include 'arxmls/**/*.arxml'
		}

		tree.each { File eachFile ->
			println "file to be processed is " + eachFile
			def theFileObj = eachFile
			if (theFileObj.exists()) {
				def arxml = new XmlSlurper().parseText(theFileObj.getText("ISO-8859-1"))  
				arxml.depthFirst().findAll {
					(it.name() == "INTERNAL-CONSTRS")
				}.each {
					println("here")
					if ( it."UPPER-LIMIT".text() == "65535" ) {
						it."UPPER-LIMIT" = "143"
						println("here1")
					//assert it.'LONG-NAME'.text() == "sint32"

					}
				}
                def writer = new FileWriter(theFileObj)
                XmlUtil.serialize(arxml, writer)
                writer.close()
			}
			else {
				println "File not found: $eachFile"
			}    
		}
	}
}
task Delete_Node {
	doLast {
		def dir="C:/Users/Avinash Kumar Singh/Downloads"
		FileTree tree = project.fileTree(dir).matching{
            include 'arxmls/**/*.arxml'
		}

		tree.each { File eachFile ->
			println "file to be processed is " + eachFile
			def theFileObj = eachFile
			if (theFileObj.exists()) {
				def arxml = new XmlSlurper().parseText(theFileObj.getText("ISO-8859-1"))  
				arxml.depthFirst().findAll {
					(it.name() == "DATA-CONSTR")
				}.each {
					if ( it.name() == "SHORT-NAME" )
					arxml.remove(it)
					//log.info( groovy.xml.XmlUtil.serialize(arxml))
					//println("here")
					//def abi=arxml.children()
					//def del=abi.find{it.name == "SHORT-NAME"}
					//abi.remove(del)
					//new XmlNodePrinter().print(arxml)
					//if ( it.name() == "<tag0:SHORT-NAME>" ) {
						//arxml.remove(it)
					println("here1")
					//}
				}

              def writer = new FileWriter(theFileObj)
			  XmlUtil.serialize(arxml, writer)
              writer.close()
			}
			else {
				println "File not found: $eachFile"
			}    
		}
	}
}